<?php
/**
 * CurrencyControllerTest.php
 * Copyright (C) 2016 thegrumpydictator@gmail.com
 *
 * This software may be modified and distributed under the terms of the
 * Creative Commons Attribution-ShareAlike 4.0 International License.
 *
 * See the LICENSE file for details.
 */
use FireflyIII\Repositories\Currency\CurrencyRepositoryInterface;


/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-12-10 at 05:51:41.
 */
class CurrencyControllerTest extends TestCase
{


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        parent::setUp();
    }

    /**
     * @covers \FireflyIII\Http\Controllers\CurrencyController::create
     */
    public function testCreate()
    {
        $this->be($this->user());
        $this->call('GET', route('currencies.create'));
        $this->assertResponseStatus(200);
        // has bread crumb
        $this->see('<ol class="breadcrumb">');
    }

    /**
     * @covers \FireflyIII\Http\Controllers\CurrencyController::defaultCurrency
     */
    public function testDefaultCurrency()
    {
        $this->be($this->user());
        $this->call('GET', route('currencies.default', [1]));
        $this->assertResponseStatus(302);
        $this->assertSessionHas('success');
    }

    /**
     * @covers \FireflyIII\Http\Controllers\CurrencyController::delete
     */
    public function testDelete()
    {
        $this->be($this->user());
        $this->call('GET', route('currencies.delete', [2]));
        $this->assertResponseStatus(200);
        // has bread crumb
        $this->see('<ol class="breadcrumb">');
    }

    /**
     * @covers \FireflyIII\Http\Controllers\CurrencyController::destroy
     */
    public function testDestroy()
    {
        $this->session(['currencies.delete.url' => 'http://localhost']);
        $repository = $this->mock(CurrencyRepositoryInterface::class);
        $repository->shouldReceive('canDeleteCurrency')->andReturn(true);
        $repository->shouldReceive('destroy')->andReturn(true);

        $this->be($this->user());
        $this->call('post', route('currencies.destroy', [1]));
        $this->assertResponseStatus(302);
        $this->assertSessionHas('success');
    }

    /**
     * @covers \FireflyIII\Http\Controllers\CurrencyController::edit
     */
    public function testEdit()
    {
        $this->be($this->user());
        $this->call('GET', route('currencies.edit', [2]));
        $this->assertResponseStatus(200);
        // has bread crumb
        $this->see('<ol class="breadcrumb">');
    }

    /**
     * @covers \FireflyIII\Http\Controllers\CurrencyController::index
     */
    public function testIndex()
    {
        $this->be($this->user());
        $this->call('GET', route('currencies.index'));
        $this->assertResponseStatus(200);
        // has bread crumb
        $this->see('<ol class="breadcrumb">');
    }

    /**
     * @covers \FireflyIII\Http\Controllers\CurrencyController::store
     */
    public function testStore()
    {
        $this->session(['currencies.create.url' => 'http://localhost']);
        $data = [
            'name'           => 'XX',
            'code'           => 'XXX',
            'symbol'         => 'x',
            'decimal_places' => 2,
        ];
        $this->be($this->user());
        $this->call('post', route('currencies.store'), $data);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('success');
    }

    /**
     * @covers \FireflyIII\Http\Controllers\CurrencyController::update
     */
    public function testUpdate()
    {
        $this->session(['currencies.edit.url' => 'http://localhost']);
        $data = [
            'name'           => 'XA',
            'code'           => 'XAX',
            'symbol'         => 'a',
            'decimal_places' => 2,
        ];
        $this->be($this->user());
        $this->call('post', route('currencies.update', [2]), $data);
        $this->assertResponseStatus(302);
        $this->assertSessionHas('success');
    }
}
